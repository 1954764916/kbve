---
export interface Props {
	ve?: string;
	data: string;
	widget: string;
	wrapper?: boolean;
	img?: string;
	e?: string;
}

const {
	ve,
	e,
	data,
	widget,
	wrapper,
	img = 'https://kbve.com/assets/img/curved-images/wave.jpg',
} = Astro.props;

import fg from 'fast-glob';
import { KbveError } from './kbve_error';
//* Most Libraries below will be removed.
import Wrapper from './lib/Wrapper.astro';
import Header from './lib/Header.astro';
import Emoji from './lib/Emoji.astro';
import VE from './VE.astro';

let html,
	comp,
	mod = '';

//* RAW - Need to wrap in try catch
try {
	comp = widget.split(':')[0];
	mod = widget.split(':')[1];
} catch (error) {
	console.error(error);
}
const runVirtualEngine = async () => {
	const _components = await Astro.glob('./lib/*.astro');
	_components.filter((comp) => console.log(`${comp.file}`));
};

//TODO - Do slots pass from one component to another? - [CHECK]
// https://docs.astro.build/en/guides/troubleshooting/#astroglob---no-matches-found
// https://docs.astro.build/en/guides/imports/
// https://www.npmjs.com/package/fast-glob

//widget.split(':')[0];

// switch (widget) {
// 	case 'header':
// 		const _components = await fg('./layer/head/**/*.astro');
// }
---

{widget == 'header' && !wrapper && <Header data={data} />}

{
	widget && (
		<VE widget={widget} data={data}>
			<slot name="raw" slot="raw" />
			<slot />
		</VE>
	)
}
