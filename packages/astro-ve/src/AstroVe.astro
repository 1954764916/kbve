---
export interface Props {
	ve?: string;
	data: string;
	widget: string;
	e?: string;
}

const {
	ve,
	e,
	data,
	widget,
} = Astro.props;

let comp, mod, lib, Safe;

if (typeof widget === 'string' && widget.length > 0) {
	try {
		comp = widget.split(':')[0];
		lib = widget.split(':')[1];
		mod = widget.split(':')[2];
		const loc = `/${comp}/${mod}/${mod}.astro`;
		const astroBin = await Astro.glob('./lib/**/*.astro');
		const _comp = astroBin.find((comp) => comp.file.includes(loc));

		if (_comp) {
			Safe = _comp.default;
		} else {
			console.error(`Unable to locate ${loc}`);
		}
	} catch (error) {
		console.error(error);
	}
}
---

{
	Safe && (
		<Safe widget={widget} data={data}>
			<slot name="raw" slot="raw" />
			<slot />
		</Safe>
	)
}
